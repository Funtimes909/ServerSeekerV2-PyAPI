from typing import Annotated
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Header, Response
from utils.key_check import check
from psycopg.rows import class_row
from endpoints import stats, servers, history, random, takedown

import os
import endpoints
import utils.models as models
import utils.responses as responses
import subprocess
import utils.database as database

if not os.path.exists("./.env"):
    subprocess.run(["cp", "./.env.example", "./.env"])
    raise Exception("Credentials not found, created new ones. Please configure the '.env' file to your needs.")

load_dotenv()

def commit_short() -> str:
    return subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode('ascii').strip()

def branch() -> str:
    return subprocess.check_output(['git', 'branch', '--show-current']).decode('ascii').strip()

description = "ServerSeekerV2 API implemented in Python <br> Maintained by [Nucceteere](https://github.com/EngurRuzgar)"

app = FastAPI(
    title="ServerSeekerV2 API",
    description=description,
    version=f"{commit_short()} @ {branch()}",
    contact={
        "name": "Nucceteere",
        "email": "ruzgar@nucceteere.xyz",
    },
    license_info={
        "name": "GPLv3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt",
    },
    docs_url="/",
    redoc_url=None
)

conn = database.pool.getconn()
gcur = conn.cursor(row_factory=class_row(models.Key))
keyTable = ("CREATE TABLE IF NOT EXISTS api_keys ("
            "ID INTEGER GENERATED BY DEFAULT AS IDENTITY,"
            "APIKey VARCHAR(255) NOT NULL UNIQUE,"
            "PRIMARY KEY (ID))")

gcur.execute(keyTable)
conn.commit()

keyQuery = gcur.execute("SELECT APIKey FROM api_keys").fetchall()
keys = check(keyQuery)
database.pool.putconn(conn)

@app.get("/stats", responses=responses.stats, operation_id="stats")
def stats():
    """
    Get the stats for ServerSeekerV2
    """
    return endpoints.stats.run()

@app.post("/takedown", responses=responses.takedown, operation_id="takedown")
def takedown(
        address: str,
        x_auth_key: Annotated[str | None, Header()] = None
):
    """
    Takedown a server from the database
    """
    key_check(x_auth_key)
    return endpoints.takedown.run(address=address)

@app.get("/random", responses=responses.random, operation_id="random")
def random(minimal: bool = None):
    """
    Return a random server
    """
    return endpoints.random.run(minimal=minimal)

@app.get("/servers", responses=responses.servers, operation_id="servers")
def servers(
        address: str = None,
        port: int = None,
        version: str = None,
        software: str = None,
        motd: str = None,
        country: str = None,
        asn: str = None,
        org: str = None,
        hostname: str = None,
        icon: bool = None,
        prevents_reports: bool = None,
        whitelist: bool = None,
        cracked: bool = None,
        enforces_secure_chat: bool = None,
        empty: bool = None,
        full: bool = None,
        minimal: bool = None,
        seenafter: int = None,
        seenbefore: int = None,
        onlineplayers: int = None,
        maxplayers: int = None,
        protocol: int = None,
        offset: int = None,
        limit: int = None,
        x_auth_key: Annotated[str | None, Header()] = None
):
    if whitelist is not None or cracked is not None:
        key_check(x_auth_key)

    return endpoints.servers.run(
        address=address,
        port=port,
        version=version,
        software=software,
        motd=motd,
        country=country,
        asn=asn,
        org=org,
        hostname=hostname,
        icon=icon,
        prevents_reports=prevents_reports,
        whitelist=whitelist,
        cracked=cracked,
        enforces_secure_chat=enforces_secure_chat,
        empty=empty,
        full=full,
        minimal=minimal,
        seenafter=seenafter,
        seenbefore=seenbefore,
        onlineplayers=onlineplayers,
        maxplayers=maxplayers,
        protocol=protocol,
        offset=offset,
        limit=limit
    )
@app.get("/history", responses=responses.history, operation_id="history")
def history(player: str = None, address: str = None, offset: int = None, limit: int = 10, x_auth_key: Annotated[str | None, Header()] = None):
    """
    Get the history of a player or server.
    - **player**: The player name you want to see history for. Incompatible with address.
    - **address**: The address you want to see history for. Incompatible with player.
    - **offset**: Offset from where to start the search
    - **limit**: Number of results to return.
    \f
    :param player: Player name to search history for.
    :param address: Address to search history for.
    :param offset: Offset from where to start the search.
    :param limit: Number of results to return.
    :param X-Auth-Key: The api token to identify yourself or your application.
    """
    key_check(x_auth_key)
    return endpoints.history.run(player=player, address=address, offset=offset, limit=limit)

@app.get("/security", operation_id="security", include_in_schema=False)
@app.get("/security.txt", operation_id="security.txt", include_in_schema=False)
@app.get("/.well-known/security", operation_id="well-known-security", include_in_schema=False)
@app.get("/.well-known/security.txt", operation_id="well-known-security.txt", include_in_schema=False)
def security():
    """
    Get the stats for ServerSeekerV2
    """
    data = """Contact: mailto:ruzgar@nucceteere.xyz
Contact: https://funtimes909.xyz
Expires: 2026-12-31T20:59:00.000Z
Encryption: https://funtimes909.xyz/Amy_contact@funtimes909.xyz-0xEEDE973B0F0B1B8A-pub.asc
Preferred-Languages: en, tr 
Canonical: https://api.funtimes909.xyz/security
Canonical: https://api.funtimes909.xyz/security.txt 
Canonical: https://api.funtimes909.xyz/.well-known/security 
Canonical: https://api.funtimes909.xyz/.well-known/security.txt 
Policy: https://github.com/Funtimes909/ServerSeekerV2-PyAPI/blob/main/SECURITY.md"""
    return Response(content=data, media_type="text/plain")

def key_check(x_auth_key: Annotated[str | None, Header()] = None):
    if not x_auth_key or x_auth_key not in keys:
        raise HTTPException(status_code=401, headers={"WWW-Authenticate": "X-Auth-Key"}, detail="You need a valid API key to run this query!")
